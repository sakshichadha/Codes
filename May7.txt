/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
pair<TreeNode*,int> findParent(TreeNode*root,int data)
{
    if(root==NULL)
    {
      pair<TreeNode*,int>ans;
        ans.first=NULL;
        ans.second=0;
        return ans;  
        
    }
        
    if((root->left!=NULL&&root->left->val==data)||(root->right!=NULL&&root->right->val==data))
    {
         pair<TreeNode*,int>ans;
        ans.first=root;
        ans.second=1;
        return ans;
        
    }
     pair<TreeNode*,int>a=findParent(root->left,data);
    a.second++;
    if(a.first==NULL)
    {a=findParent(root->right,data);
     a.second++;
    }
    return a;
 
}
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        pair<TreeNode*,int> p1=findParent(root,x);
         pair<TreeNode*,int> p2=findParent(root,y);
        if(p1.first==NULL||p2.first==NULL)
            return false;
        if(p1.first->val!=p2.first->val&&(p1.second==p2.second))
            return true;
        return false;
        
        
    }
};