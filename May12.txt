class node
        {
       
    public:
     bool lastnode;
        node*children[26];
           node()
           {
              for(int i=0;i<26;i++)
                  children[i]=NULL;
              lastnode=false;

           }
         
        };
class Trie {
    node*root;
public:
    /** Initialize your data structure here. */
    Trie() {
       
       root=new node(); 
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        node*temp=root;
        for(int i=0;i<word.length();i++)
        {
            int t=word[i]-'a';
          
             if(temp->children[t]==NULL)
             {
               temp->children[t]=new node();  
             }
            
         temp=temp->children[t];
        }
        temp->lastnode=true;
        
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        node*temp=root;
        for(int i=0;i<word.length();i++)
        {
          int t=word[i]-'a';
           
            if(temp->children[t]==NULL)
                return false;
            
            temp=temp->children[t];
            
            
        }
        if(temp!=NULL&&temp->lastnode==true)
            return true;
        else
            return false;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        node*temp=root;
        for(int i=0;i<prefix.length();i++)
        {
            int t=prefix[i]-'a';
          
                if(temp->children[t]==NULL)
                return false; 
           
  temp=temp->children[t];
        }
        if(temp!=NULL)
        return true;
        else
            return false;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */