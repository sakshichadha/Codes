/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //TreeNode*root=NULL;
    
    TreeNode* help(vector<int>& preorder,int& i,int& n,int min,int max)
    {
     if(i>=n)
         return NULL;
        if(preorder[i]<min||preorder[i]>max)
            return NULL;
        //if(preorder[i])
       TreeNode*root=NULL;
    
         if(preorder[i]>=min&&preorder[i]<=max)
         {
             
        root=new TreeNode;
             root->left=NULL;
             root->right=NULL;
        root->val=preorder[i];
        i++;
            root->left=help(preorder,i,n,min,root->val);
            
            root->right=help(preorder,i,n,root->val+1,max);
      
        }
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
         // TreeNode*root=new TreeNode;
         // root->val=preorder[0];
        int n=preorder.size();
        int i=0;
       return help(preorder,i,n,INT_MIN,INT_MAX);
        
    
        
    }
};